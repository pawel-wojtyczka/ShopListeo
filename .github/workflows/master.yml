# .github/workflows/master.yml

name: Deploy to Cloudflare Pages

# Kontroluje, kiedy przepływ pracy będzie uruchamiany
on:
  # Uruchamia się na pushach do gałęzi master
  push:
    branches: [master]

  # Pozwala na ręczne uruchomienie tego przepływu pracy ze strony Actions na GitHubie
  workflow_dispatch:

# Grupuje zadania, które będą wykonywane w ramach przepływu pracy
jobs:
  # Zadanie sprawdzania kodu
  lint:
    runs-on: ubuntu-latest
    name: Lint Check
    steps:
      # Pobiera kod repozytorium
      - name: Checkout repository
        uses: actions/checkout@v4

      # Ustawia środowisko Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: ".nvmrc"
          cache: "npm"

      # Instaluje zależności projektu
      - name: Install dependencies
        run: npm ci

      # Uruchamia linting
      - name: Run lint
        run: npm run lint

  # Zadanie budowania
  build:
    runs-on: ubuntu-latest
    name: Build
    needs: lint
    steps:
      # Pobiera kod repozytorium
      - name: Checkout repository
        uses: actions/checkout@v4

      # Ustawia środowisko Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: ".nvmrc"
          cache: "npm"

      # Instaluje zależności projektu
      - name: Install dependencies
        run: npm ci

      # Buduje projekt
      - name: Build project
        run: npm run build

      # Zapisuje artefakty budowania
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-output
          path: ./dist
          if-no-files-found: error

  # Zadanie wdrażania na Cloudflare Pages
  deploy:
    runs-on: ubuntu-latest
    name: Deploy to Cloudflare Pages
    needs: build
    steps:
      # Pobiera kod repozytorium
      - name: Checkout repository
        uses: actions/checkout@v4

      # Pobiera artefakty budowania
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-output
          path: ./dist

      # Instaluje Wrangler CLI
      - name: Install Wrangler
        run: npm install -g wrangler@latest

      # Tworzy dynamiczny plik wrangler.toml z konfiguracją
      - name: Create Wrangler config
        run: |
          cat > wrangler.toml << EOL
          name = "shoplisteo"
          pages_build_output_dir = "./dist"

          # Zmienne środowiskowe
          [vars]
          PUBLIC_SUPABASE_URL = "${{ secrets.PUBLIC_SUPABASE_URL }}"
          PUBLIC_SUPABASE_ANON_KEY = "${{ secrets.PUBLIC_SUPABASE_ANON_KEY }}"
          OPENAI_API_KEY = "${{ secrets.OPENAI_API_KEY }}"
          EOL

      # Wdraża aplikację na Cloudflare Pages
      - name: Deploy to Cloudflare Pages
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: wrangler pages deploy ./dist --project-name=shoplisteo 