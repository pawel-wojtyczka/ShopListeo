# .github/workflows/master.yml

name: Deploy to Cloudflare Pages ver. 1.2.0

# Kontroluje, kiedy przepływ pracy będzie uruchamiany
on:
  # Uruchamia się na pushach do gałęzi master
  push:
    branches: [master]

  # Pozwala na ręczne uruchomienie tego przepływu pracy ze strony Actions na GitHubie
  workflow_dispatch:

# Grupuje zadania, które będą wykonywane w ramach przepływu pracy
jobs:
  # Zadanie sprawdzania kodu
  lint:
    runs-on: ubuntu-latest
    name: Lint Check
    steps:
      # Pobiera kod repozytorium
      - name: Checkout repository
        uses: actions/checkout@v4

      # Ustawia środowisko Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: ".nvmrc"
          cache: "npm"

      # Instaluje zależności projektu
      - name: Install dependencies
        run: npm ci

      # Uruchamia linting
      - name: Run lint
        run: npm run lint

  # Zadanie budowania
  build:
    runs-on: ubuntu-latest
    name: Build
    needs: lint # Build zależy od lint
    steps:
      # Pobiera kod repozytorium
      - name: Checkout repository
        uses: actions/checkout@v4

      # Ustawia środowisko Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: ".nvmrc"
          cache: "npm"

      # Instaluje zależności projektu
      - name: Install dependencies
        run: npm ci

      # Buduje projekt
      - name: Build project
        env:
          PUBLIC_SUPABASE_URL: ${{ secrets.PUBLIC_SUPABASE_URL }}
          PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.PUBLIC_SUPABASE_ANON_KEY }}
        run: npm run build

      # Zapisuje artefakty budowania
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-output
          path: ./dist
          if-no-files-found: error

  # Zadanie testowania (umieszczone po build)
  test:
    runs-on: ubuntu-latest
    name: Run Unit Tests
    needs: build # Testy uruchamiane po pomyślnym budowaniu
    steps:
      # Pobiera kod repozytorium
      - name: Checkout repository
        uses: actions/checkout@v4

      # Ustawia środowisko Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: ".nvmrc"
          cache: "npm"

      # Instaluje zależności projektu (w tym devDependencies potrzebne do testów)
      - name: Install dependencies
        run: npm ci

      # Uruchamia testy jednostkowe
      - name: Run tests
        run: npm test # Założenie: komenda do testów to 'npm test'

  # Nowe zadanie do testów Playwright
  playwright_tests:
    runs-on: ubuntu-latest
    name: Run Playwright E2E Tests
    needs: build # Testy E2E uruchamiane po pomyślnym budowaniu
    steps:
      # Pobiera kod repozytorium
      - name: Checkout repository
        uses: actions/checkout@v4

      # Ustawia środowisko Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: ".nvmrc"
          cache: "npm"

      # Instaluje zależności projektu
      - name: Install dependencies
        run: npm ci

      # Pobiera artefakty budowania
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-output
          path: ./dist

      # Instaluje Wrangler CLI
      - name: Install Wrangler
        run: npm install -g wrangler@latest

      # Instaluje przeglądarki Playwright
      - name: Install Playwright Browsers
        run: npx playwright install --with-deps

      # Uruchamia testy Playwright
      - name: Run Playwright tests
        env:
          DEBUG: "pw:api,pw:webserver"
          PUBLIC_SUPABASE_URL: ${{ secrets.PUBLIC_SUPABASE_URL }}
          PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.PUBLIC_SUPABASE_ANON_KEY }}
          # Jeśli używasz SERVICE_ROLE_KEY w global.setup.ts lub global.teardown.ts do czyszczenia danych:
          # SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
          E2E_USERNAME_ID: ${{ secrets.E2E_USERNAME_ID }}
          E2E_USERNAME: ${{ secrets.E2E_USERNAME }}
          E2E_PASSWORD: ${{ secrets.E2E_PASSWORD }}
          E2E_EMAIL_TO_TEST: ${{ secrets.E2E_EMAIL_TO_TEST }}
        run: npm run test:e2e

      # Przesyła raporty z testów Playwright (opcjonalne, ale zalecane)
      - name: Upload Playwright report
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: playwright-report/ # Domyślna ścieżka dla raportów Playwright
          if-no-files-found: error # Zgłosi błąd, jeśli raporty nie zostaną znalezione

  # Zadanie wdrażania na Cloudflare Pages
  deploy:
    runs-on: ubuntu-latest
    name: Deploy to Cloudflare Pages
    needs: playwright_tests # Deploy uruchamiany po pomyślnych testach Playwright
    steps:
      # Pobiera kod repozytorium
      - name: Checkout repository
        uses: actions/checkout@v4

      # Pobiera artefakty budowania
      # Uwaga: Artefakty są z joba 'build', ale pobieramy je w jobie 'deploy'
      # Job 'test' nie potrzebuje artefaktów budowania, tylko zależności
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-output
          path: ./dist

      # Instaluje Wrangler CLI
      - name: Install Wrangler
        run: npm install -g wrangler@latest

      # Wdraża aplikację na Cloudflare Pages
      - name: Deploy to Cloudflare Pages
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: wrangler pages deploy ./dist --project-name=shoplisteo --commit-dirty=true 